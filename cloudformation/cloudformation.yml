# This CloudFormation template is used to launch the resources required for the
# introduction to Ansible class.
#
# If you use it in your own AWS environment, you will incur charges.
#
# You will need the following already provisioned:
# - SSH Keypair
# - Route 53 Hosted Zone
#
# Also note, this uses the CentOS AMI from the marketplace. You will need to
# accept the terms in the marketplace before launching this stack the first
# time, otherwise CloudFormation will 'hang' while launching the EC2 Instances.
# Visit https://wiki.centos.org/Cloud/AWS to accept the terms.
AWSTemplateFormatVersion: '2010-09-09'
Description: Cloudformation Template for Ansible class
Parameters:
  KeyName:
    Description: Keypair name for access to EC2
    Type: AWS::EC2::KeyPair::KeyName
  DomainName:
    Description: Route 53 hosted domain name
    Type: String
  StudentPassword:
    Description: Password to set for student user
    Type: String
    NoEcho: true
  CentOSAMI:
    Description: CentOS 7 AMI to use for instances (https://wiki.centos.org/Cloud/AWS)
    Type: AWS::EC2::Image::Id
    # CentOS 7 AMI for us-west-2
    # You may have to accept the terms in the marketplace before deploying
    Default: ami-a042f4d8
  AdminCIDR:
    Description: CIDR block that can SSH into servers
    Type: String
    Default: '0.0.0.0/0'
Resources:
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['database', !Ref "AWS::StackName"]]
      GroupDescription: Allow inbound ssh and 3306/tcp from Webapp
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupName: !Ref WebappSecurityGroup
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref AdminCIDR
      Tags:
      - Key: Name
        Value: !Join ['-', ['database', !Ref "AWS::StackName"]]
  DatabaseInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref CentOSAMI
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeType: gp2
          DeleteOnTermination: True
          VolumeSize: 8
      SecurityGroupIds:
      - !Ref DatabaseSecurityGroup
      Tags:
      - Key: Name
        Value: !Join ['-', ['database', !Ref "AWS::StackName"]]
      UserData: !Base64
        Fn::Sub: |-
          #!/bin/bash -x
          useradd -m -s /bin/bash student
          echo '${StudentPassword}' | passwd --stdin student
          sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          systemctl restart sshd
          echo 'student ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/student
  DatabaseDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DomainName
      Name: !Join ['', ['db-', !Ref "AWS::StackName", '.', !Ref DomainName]]
      Type: A
      TTL: 60
      ResourceRecords:
      - !GetAtt DatabaseInstance.PublicIp
  WebappSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Join ['-', ['Webapp', !Ref "AWS::StackName"]]
      GroupDescription: Allow inbound http & ssh for Webapp
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: !Ref AdminCIDR
      Tags:
      - Key: Name
        Value: !Join ['-', ['Webapp', !Ref "AWS::StackName"]]
  WebappInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      ImageId: !Ref CentOSAMI
      KeyName: !Ref KeyName
      BlockDeviceMappings:
      - DeviceName: /dev/sda1
        Ebs:
          VolumeType: gp2
          DeleteOnTermination: True
          VolumeSize: 8
      SecurityGroupIds:
      - !Ref WebappSecurityGroup
      Tags:
      - Key: Name
        Value: !Join ['-', ['Webapp', !Ref "AWS::StackName"]]
      UserData: !Base64
        Fn::Sub: |-
          #!/bin/bash -x
          useradd -m -s /bin/bash student
          echo '${StudentPassword}' | passwd --stdin student
          sed -i 's/^PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          systemctl restart sshd
          echo 'student ALL=(ALL) NOPASSWD:ALL' > /etc/sudoers.d/student
  WebappDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref DomainName
      Name: !Join ['', ['www-', !Ref "AWS::StackName", '.', !Ref DomainName]]
      Type: A
      TTL: 60
      ResourceRecords:
      - !GetAtt WebappInstance.PublicIp
